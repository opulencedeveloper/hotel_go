'use client';

import { useAppState } from '@/hooks/useAppState';
import { useRouter } from 'next/navigation';
import { useEffect, ReactNode } from 'react';

interface ProtectedRouteProps {
  children: ReactNode;
  requiredPermission?: string;
  fallbackPath?: string;
}

export default function ProtectedRoute({ 
  children, 
  requiredPermission,
  fallbackPath = '/login' 
}: ProtectedRouteProps) {
  const { user, isLoading, hasPermission, canAccessRoute } = useAppState();
  const router = useRouter();

  useEffect(() => {
    if (!isLoading) {
      if (!user) {
        router.push(fallbackPath);
        return;
      }

      // Check specific permission if provided
      if (requiredPermission && !hasPermission(requiredPermission)) {
        router.push('/dashboard'); // Redirect to dashboard if no permission
        return;
      }

      // Check route access based on current path
      const currentPath = window.location.pathname;
      if (!canAccessRoute(currentPath)) {
        router.push('/dashboard'); // Redirect to dashboard if no route access
        return;
      }
    }
  }, [user, isLoading, requiredPermission, hasPermission, canAccessRoute, router, fallbackPath]);

  if (isLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-primary-600"></div>
      </div>
    );
  }

  if (!user) {
    return null;
  }

  if (requiredPermission && !hasPermission(requiredPermission)) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <h1 className="text-2xl font-bold text-secondary-900 mb-4">Access Denied</h1>
          <p className="text-secondary-600 mb-6">You don't have permission to access this page.</p>
          <button 
            onClick={() => router.push('/dashboard')}
            className="btn-primary"
          >
            Go to Dashboard
          </button>
        </div>
      </div>
    );
  }

  return <>{children}</>;
}

